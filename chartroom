#!/usr/bin/env python

import csv
import sys
import os

from lapchart_gui import LapChartGUI

my_version = '0.1'

class chartcar:
    # XXX update GUI when something changes
    def __init__(self, parent, car_id, car_no='??'):
        self.parent = parent
        self.id = id
        self._car_no = car_no
        self._laps = 0
        self._class = None

    def car_no(self, val=None):
        if val != None: self._car_no = val
        return self._car_no

    def laps(self, val=None):
        if val != None: self._laps = val
        return self._laps

    def class_(self, val=None):
        if val != None: self._class = val
        return self._class

class chartdatacell:
    # XXX update GUI when something changes
    def __init__(self, parent, lap, pos, gui=None):
        self.parent = parent
        self.lap = lap
        self.pos = pos
        if gui: self.gui = gui.getCell(lap, pos)
        else:   self.gui = None
        self._car = None
        self._lead = None

    def reset(self):
        self._car = None
        self._lead = None
        if self.gui: self.gui.set(None)

    def car(self, val=None):
        if val != None:
            self._car = val
            if self.gui: self.gui.set(val)
        return self._car

    def lead(self, val=None):
        if val != None: self._lead = val
        return self._lead


class chartdata:
    def __init__(self, gui=None):
        self.gui = gui
        self.cars = {}
        self.cells = []
        self.maxpos = 0

    def car(self, car_id, car_no='??', create=False):
        if car_id not in self.cars and not create:
            return None
        if car_id not in self.cars:
            self.cars[car_id] = chartcar(self, car_id, car_no)
        return self.cars[car_id]

    def num_laps(self):
        return len(self.cells)

    def max_pos(self, lap=None):
        if lap == None: return self.maxpos
        if lap > len(self.cells): return None
        return len(self.cells[lap-1])

    def lookup(self, lap, pos):
        if lap > len(self.cells): return None
        if pos > len(self.cells[lap-1]): return None
        return self.cells[lap-1][pos-1]

    def add(self, car_id, lap=None, pos=None, lead=None):
        car = self.car(car_id, car_no=car_id, create=True)

        # Determine lap and make sure we have enough columns
        if lap == None:
            lap = car.laps() + 1
        if lap > len(self.cells):
            self.cells.extend([[] for i in range(lap - len(self.cells))])
        if lap > car.laps():
            car.laps(lap)

        # Determine lead lap
        if lead == None:
            lead = len(self.cells)
            if lead < lap: lead = lap

        # Determine position and make sure we have enough cells
        if pos == None:
            pos = self.max_pos(lap) + 1
        if pos > self.maxpos:
            self.maxpos = pos
        if pos > self.max_pos(lap):
            self.cells[lap-1].extend([None] * (pos - self.max_pos(lap)))
        if self.cells[lap-1][pos-1] == None:
            self.cells[lap-1][pos-1] = chartdatacell(self, lap, pos, gui)

        # Update the cell
        cell = self.cells[lap-1][pos-1]
        cell.car(car)
        cell.lead(lead)

def load_passings(data, path):
    with open(path, 'rb') as pfile:
        reader = csv.DictReader(pfile, delimiter='\t', quoting=csv.QUOTE_NONE)
        for row in reader:
            car_no = row['No.']
            if car_no == '' or car_no == '??': continue
            lap = int(row['Laps'].strip('P '))
            if lap <= 0: continue
            lead = int(row['Lead'])
            class_ = row['Class']
            driver = row['Name']
            car_id = car_no + '_' + class_ + '_' + driver
            car = data.car(car_id, car_no, create=True)
            car.car_no(car_no)
            car.class_(class_)
            if lap <= car.laps(): continue
            data.add(car_id, lap=lap, lead=lead)

def save_ps(data, path):
    if hasattr(sys, "frozen"):
        mainprog = sys.executable
    else:
        mainprog = sys.argv[0]
    tpath = os.path.join(os.path.dirname(mainprog), 'template.ps')
    with open(tpath, 'r') as template, open(path, 'w') as output:
        for line in template:
            if line.strip() == '%%Insert-Chart-Here':
                laps = data.num_laps()
                output.write("%d %d ChartFrame\n" % (laps, data.max_pos()))
                output.write("ChartModePlain\n")
                mode = "Plain"
                for lap in range(1, 1+laps):
                    for pos in range(1, 1+data.max_pos(lap)):
                        cell = data.lookup(lap, pos)
                        lead = cell.lead()

                        if lead == laps: newmode = "Final"
                        elif lead % 5:   newmode = "Plain"
                        elif lead % 10:  newmode = "Odd"
                        else:            newmode = "Even"
                        if mode != newmode:
                            output.write("ChartMode%s\n" % newmode)
                            mode = newmode
                        output.write("%d %d (%s) ChartCell\n" %
                                (lap, pos, cell.car().car_no()))
            else:
                output.write(line)

if __name__ == '__main__':
    gui = LapChartGUI()
    gui.master.title('ChartRoom v%s' % my_version)
    data = chartdata(gui)

    if len(sys.argv) > 1:
        load_passings(data, sys.argv[1])
    else:
        data.add('10') # 1, 1
        data.add('2',) # 1, 2
        data.add('08') # 1, 3
        data.add('55') # 1, 4
        data.add('42') # 1, 5
        data.add('10') # 2, 1
        data.add('08') # 2, 2
        data.add('2',) # 2, 3
        data.add('55') # 2, 4
        data.add('08') # 3, 1
        data.add('42') # 2, 5
        data.add('10') # 3, 2
        data.add('2',) # 3, 3
        data.add('55') # 3, 4
        data.add('15', 1,15)
        data.add('1', 14, 1)

    if len(sys.argv) > 2:
        save_ps(data, sys.argv[2])
    else:
        gui.mainloop()
