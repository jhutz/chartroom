#!/usr/bin/env python

import Tkinter as tk

my_version = '0.1'

lap_col_size=35
pos_row_size=20

FILL_PARENT = tk.N+tk.S+tk.E+tk.W

class LapChartFrame(tk.Frame):
    def __init__(self, master):
        self.cells = []
        self.lap_lbls = []
        self.pos_lbls = []

        tk.Frame.__init__(self, master)
        self.columnconfigure(0, minsize=lap_col_size)
        self.rowconfigure(0, minsize=pos_row_size)
        self.columnconfigure(1, weight=1, minsize=10 * lap_col_size)
        self.rowconfigure(1, weight=1, minsize=10 * pos_row_size)

        self.lap_lbl_frame  = tk.Frame(self)
        self.pos_lbl_frame = tk.Frame(self)
        self.canvas = tk.Canvas(self, bg='white')
        self.vscrollbar = tk.Scrollbar(self, orient=tk.VERTICAL)
        self.canvas['yscrollcommand'] = self.vscrollbar.set
        self.vscrollbar['command'] = self.canvas.yview
        self.hscrollbar = tk.Scrollbar(self, orient=tk.HORIZONTAL)
        self.canvas['xscrollcommand'] = self.hscrollbar.set
        self.hscrollbar['command'] = self.canvas.xview

        self.lap_lbl_frame.grid(row=0, column=1, ipady=1, sticky=tk.W+tk.E)
        self.pos_lbl_frame.grid(row=1, column=0, sticky=tk.N+tk.S)
        self.canvas.grid(row=1, column=1, sticky=FILL_PARENT)
        self.vscrollbar.grid(row=1, column=2, sticky=tk.N+tk.S)
        self.hscrollbar.grid(row=2, column=1, sticky=tk.W+tk.E)

        self.getCellVar(1,1).set("10")
        self.getCellVar(1,2).set("2")
        self.getCellVar(1,3).set("08")
        self.getCellVar(1,4).set("55")
        self.getCellVar(1,5).set("42")

        self.getCellVar(2,1).set("10")
        self.getCellVar(2,2).set("08")
        self.getCellVar(2,3).set("2")
        self.getCellVar(2,4).set("55")

        self.getCellVar(3,1).set("08")
        self.getCellVar(3,2).set("10")
        self.getCellVar(3,3).set("2")
        self.getCellVar(3,4).set("55")


    def getCellVar(self, lap, pos):
        while lap > len(self.lap_lbls):
            i = len(self.lap_lbls)
            self.canvas.columnconfigure(i, minsize=lap_col_size)
            self.lap_lbl_frame.columnconfigure(i, minsize=lap_col_size)
            lbl = tk.Label(self.lap_lbl_frame, anchor=tk.CENTER, text=i+1)
            lbl.grid(row=0, column=i, sticky=FILL_PARENT)
            self.lap_lbls.append(lbl)
            self.cells.append([])
        while pos > len(self.pos_lbls):
            i = len(self.pos_lbls)
            self.canvas.rowconfigure(i, minsize=pos_row_size)
            self.pos_lbl_frame.rowconfigure(i, minsize=pos_row_size)
            lbl = tk.Label(self.pos_lbl_frame, anchor=tk.E, text=i+1)
            lbl.grid(row=i, column=0, sticky=tk.E)
            self.pos_lbls.append(lbl)
        x = lap-1
        y = pos-1
        if pos > len(self.cells[x]):
            self.cells[x].extend([None] * (pos - len(self.cells[x])))
        if self.cells[x][y] == None:
            var = tk.StringVar()
            cell = tk.Label(self.canvas, anchor=tk.CENTER, bg='white',
                    textvariable=var)
            self.cells[x][y] = (cell,var)
            cell.grid(column=x, row=y)
        return self.cells[x][y][1]

        
class LapChartGUI(tk.Frame):
    def __init__(self, master=None):
        tk.Frame.__init__(self, master)
        self.winfo_toplevel().rowconfigure(0, weight=1)
        self.winfo_toplevel().columnconfigure(0, weight=1)
        self.grid(sticky=FILL_PARENT)
        self.createWidgets()

    def quitEvent(self, event): self.quit()
    def createWidgets(self):
        self.chart_frame = LapChartFrame(self)
        self.chart_frame.grid(sticky=FILL_PARENT)

        self.menubar = tk.Menu(self)
        self.master.config(menu=self.menubar)

        menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label="File", menu=menu)
        menu.add_command(label="Quit", command=self.quit,
                accelerator="Ctrl+Q")
        self.bind_all('<Control-KeyPress-q>', self.quitEvent)

if __name__ == '__main__':
    gui_app = LapChartGUI()
    gui_app.master.title('LapChart v%s' % my_version)
    gui_app.mainloop()
